##############################################################
#
# Configuration for UADI Linked Data API.
#
##############################################################

# Common prefixes
@prefix api:     <http://purl.org/linked-data/api/vocab#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dcmiType: <http://purl.org/dc/dcmitype/> .
@prefix elda:    <http://www.epimorphics.com/vocabularies/lda#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .
@prefix dcat: <https://www.w3.org/ns/dcat#> .
@prefix void: <http://rdfs.org/ns/void#> .
@prefix qb: <http://purl.org/linked-data/cube#> .

# These two break if made relative to @base:
@prefix uquol: 	<http://cfdev.intersect.org.au/def/voc/iso37120/> .
@prefix gl: <http://cfdev.intersect.org.au/def/datasets/spatial/> .

@base <http://cfdev.intersect.org.au/def/> .
#
@prefix uadi:  <api/uadi#> .
@prefix skosimg: <image/> .

# API spec
#
uadi:api a api:API;
    api:maxPageSize "1000";
    api:defaultPageSize "200";
    api:defaultFormatter [
        a api:XsltFormatter;
        api:name "html";
        api:stylesheet "lda-assets/resources/siss-default/transform/ashtml-sissvoc.xsl";
        api:mimeType "text/html";
    ];
    
    api:variable [api:name "webapp"; api:value "/dna"];

    api:variable
        [api:name "SISSDefaultResourceDirBase"; api:value "{webapp}/lda-assets/resources/siss-default/"],
        [api:name "_resourceRoot"; api:value "{webapp}/"],
        [api:name "myResourceDirBase"; api:value "{webapp}/lda-assets/resources/dna/"],
        [api:name "serviceTitle"; api:value "UADI API"],
        [api:name "serviceAuthor"; api:value "Jonathan Doig"],
        [api:name "serviceAuthorEmail"; api:value "j.doig@unsw.edu.au"],
        [api:name "serviceHomePage"; api:value "http://cfdev.intersect.org.au:8080/dna/meta/"];

    api:endpoint uadi:node, uadi:nodes, uadi:links, uadi:map, uadi:images ;

    rdfs:label "UADI API"@en;

	api:sparqlEndpoint <http://cfdev.intersect.org.au:8080/rdf4j-server/repositories/uquol>
    .

<http://cfdev.intersect.org.au:8080/rdf4j-server/repositories/uquol> elda:supportsNestedSelect true .

uadi:node a api:ListEndpoint;
    rdfs:label "UQUOL concept and parent";
    rdfs:comment "Returns a concept in the UQUOL scheme, plus its parent concept";
    api:exampleRequestPath "/node?concept=Homeless";
    api:uriTemplate "/node?concept={concept}";
    api:selector [
        api:where
          """SELECT ?item
          WHERE {
              ?item a skos:concept;
                    skos:inScheme uquol: ;
                    skos:prefLabel ?x FILTER(str(?x) = ?concept) .
          }""";
        ];
        api:defaultViewer uadi:linksViewer;
    .

uadi:nodes a api:ListEndpoint;
    rdfs:label "Array of all nodes";
    rdfs:comment "Returns an array of all nodes within the uquol scheme";
    api:exampleRequestPath "/nodes";
    api:uriTemplate "/nodes";
    api:selector [
        api:where
          """SELECT ?item
          WHERE {
              ?item a skos:concept;
                    skos:inScheme uquol:
          }""";
        ];
        api:defaultViewer uadi:nodesViewer;
    .

uadi:links a api:ListEndpoint;
    rdfs:label "Array of all links";
    rdfs:comment "Returns an array of all links within the uquol scheme";
    api:exampleRequestPath "/links";
    api:uriTemplate "/links";
    api:selector [
        api:where
          """SELECT ?item
          WHERE {
              ?item a skos:concept;
                    skos:broader ?parent;
                    skos:inScheme uquol:
          }""";
        ];
        api:defaultViewer uadi:linksViewer;
        api:viewer uadi:linksViewer, uadi:nodesViewer;
    .

uadi:map a api:ListEndpoint;
    rdfs:label "Map a concept";
    rdfs:comment "Returns properties of datasets with a heatmap technical feature, to generate a WMS request for a default choropleth map of a concept";
    api:exampleRequestPath "/map?concept=Homeless";
    api:uriTemplate "/map?concept={concept}";
    api:selector [
        api:where
          """SELECT DISTINCT ?item
          WHERE {
              ?item a void:Dataset ; 
                    void:feature gl:heatmap ;
                    qb:structure ?struct .
              ?struct qb:component ?dsMeasure .
              ?dsMeasure qb:measure ?measure .
              ?measure qb:concept ?conceptId .
              ?conceptId skos:prefLabel ?x FILTER(str(?x) = ?concept) .
          }""";
        ];
        api:defaultViewer uadi:mapViewer;
    .

uadi:images a api:ListEndpoint;
    rdfs:label "Images about a concept";
    rdfs:comment "Returns an array of images about a concept";
    api:exampleRequestPath "/images?concept=Homeless";
    api:uriTemplate "/images?concept={concept}";
    api:selector [
        api:where
          """SELECT DISTINCT ?item
          WHERE {
              ?item a dcmiType:Image ;
                dcterms:subject ?conceptId .
              ?conceptId skos:prefLabel ?x FILTER(str(?x) = ?concept) .
          }""";
        ];
        api:defaultViewer uadi:imageViewer;
    .

# CUSTOM VIEWERS:

uadi:nodesViewer a api:Viewer;
    api:name "nodes";
    rdfs:label "Properties returned in nodes array";
    api:property skos:prefLabel,
      (skosimg:hasImage dcterms:identifier),
      skos:topConceptOf .

uadi:linksViewer a api:Viewer;
    api:name "links" ;
    rdfs:label "Properties returned in links array" ;
    api:property skos:broader .

uadi:mapViewer a api:Viewer;
    api:name "map";
    rdfs:label "Properties returned in map view";
    api:property gl:wxsServer, gl:layer, dcat:extent,
      
      (qb:structure qb:component gl:prefStyle)  . # Issue: this will get ANY style on this dataset. I only want the style associated with this concept.

uadi:imageViewer a api:Viewer;
    api:name "image";
    rdfs:label "Properties returned in image view";
    api:property dcterms:identifier, dcterms:format .