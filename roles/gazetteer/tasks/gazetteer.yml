---
- name: rdf_io checkout
  git: repo=git://github.com/rob-metalinkage/django-rdf-io.git dest={{ top_project }}/django-rdf-io force=no
  become_user: '{{ application_user }}'
  ignore_errors: True
  tags: git

- name: skosxl checkout
  git: repo=git://github.com/rob-metalinkage/django-skosxl.git dest={{ top_project }}/django-skosxl force=no
  become_user: '{{ application_user }}'
  ignore_errors: True
  tags: git

- name: django-gazetteer checkout
  git: repo=git://github.com/rob-metalinkage/django-gazetteer.git dest={{ top_project }}/django-gazetteer force=no
  become_user: '{{ application_user }}' 
  ignore_errors: True
  tags: git

- name: uriredirect checkout
  git: repo=git://github.com/rob-metalinkage/uriredirect.git dest={{ top_project }}/uriredirect force=no
  become_user: '{{ application_user }}'
  ignore_errors: True
  tags: git

- name: Copy requirements file
  copy: src=../files/requirements_gaz.txt dest={{ top_project }}/requirements_gaz.txt

- name: pip virtual install
  pip: virtualenv={{venv}} chdir={{ project_path }} requirements=../requirements_gaz.txt
  become: true
  tags: pip
  when: venv is defined
  
- name: pip install
  pip: chdir={{ project_path }} requirements=../requirements_gaz.txt
  become: true
  tags: pip
  when: venv is not defined
  
- name: write project local settings - sync filesystem safe
  template: src=../files/local_settings_gaz.py.j2 dest=/tmp/local_settings_gaz.py
  become_user: '{{ application_user }}'
  tags: settings

- name: check for settings directory
  stat: path='{{ settings_path }}/settings'
  register: settings_dir

- name: set settings path
  set_fact:
    settings_path: '{{ settings_path }}/settings'
  when: settings_dir.stat.exists
  
- name: mv project local settings across synced file system if necessary
  command: mv /tmp/local_settings_gaz.py '{{ settings_path }}/local_settings_gaz.py'
  become_user: '{{ application_user }}'
  notify: restart django
  tags: settings
  
- name: import local_settings_gaz
  blockinfile:
    dest: '{{ settings_path }}/local_settings.py'
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    block: |
      # Load more settings from a file called local_settings_gaz.py if it exists
      try:
          from local_settings_gaz import *
      except ImportError:
          pass
  become_user: '{{ application_user }}'

- name: add url patterns
  blockinfile:
    dest: '{{ project_path }}/{{ package }}/urls.py'
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    block: |
      try:
          urlpatterns += patterns('', 
              # Gazetteer 
              url(r"^gazetteer/", include('gazetteer.urls')),
              # URI redirectors
              url(r"^def/", include('uriredirect.urls')), 
              url(r"^rdf_io/", include ('rdf_io.urls')),
              # Semantic Web components
              url(r"^skosxl/", include ('skosxl.urls')),
          )
      except:
          pass
  become_user: '{{ application_user }}'

- name: install RDF4J
  unarchive: creates=/tmp/eclipse-rdf4j-2.1.1/war/rdf4j-server.war dest=/tmp  remote_src=yes src=http://www.eclipse.org/downloads/download.php?file=/rdf4j/eclipse-rdf4j-2.1.1-sdk.zip&r=1
  tags: rdf4j

- name: Ensures /usr/share/tomcat7/.RDF4J dir exists
  file: path=/usr/share/tomcat7/.RDF4J group=tomcat7 owner=tomcat7 mode=755 state=directory
  tags: rdf4j
 
- name: check if war installed
  stat: path=/var/lib/tomcat7/webapps/rdf4j-server.war
  register: file_exists
  tags: rdf4j
  
- name: mv war files to tomcat
  shell: cp /tmp/eclipse-rdf4j*/war/*.war /var/lib/tomcat7/webapps/
  when: not file_exists.stat.exists
  tags: rdf4j
  
- name: Ensure manage.py is executable
  # Required for Ansible 2.x https://github.com/ansible/ansible-modules-core/issues/2856
  file: dest='{{ project_path }}/manage.py' mode=u+x
  become_user: '{{ application_user }}'
  
- name: update manage.py shebang
  # Required for Ansible 2.x https://github.com/ansible/ansible-modules-core/issues/2856
  lineinfile:
    dest: '{{ project_path }}/manage.py'
    insertbefore: BOF
    regexp: '^#!'
    line: '#!/usr/bin/env python'
  become_user: '{{ application_user }}'

- name: virtual syncdb
  django_manage: command="syncdb --noinput" virtualenv={{ venv }} app_path={{ project_path }}
  become: true
  tags: [update, syncdb]
  when: venv is defined

- name: syncdb
  django_manage: command="syncdb --noinput" app_path={{ project_path }}
  become: true
  tags: [update, syncdb]
  when: venv is not defined
  notify: restart django

- name: initialise skosxl
  uri: url=http://{{ host }}/skosxl/manage/init